Module:   dylan-user
Synopsis: Definitions of general use that could be considered for
          inclusion in common-dylan if they stand the test of time, plus
          (optionally) shorter names for many Dylan language constructs.
Copyright: See LICENSE in this distribution for details.


define library uncommon-dylan
  use collections,
    import: { table-extensions };
  use common-dylan,
    // Re-export modules other than common-dylan so it's not necessary to use both
    // uncommon-dylan and common-dylan, but also so that libraries that choose to use
    // uncommon-utils and not uncommon-dylan can still use these modules.
    export: { byte-vector,
              common-extensions,
              locators-protocol,
              machine-words,
              simple-format,
              simple-profiling,
              simple-random,
              simple-timers,
              streams-protocol,
              transcendentals };
  export
    uncommon-brevity,
    uncommon-dylan,
    uncommon-utils;
end library uncommon-dylan;

define module uncommon-utils
  // Collections
  create
    <istring-table>,
    count;

  // Odds and ends
  create
    ash<<, ash>>,
    begin1,
    iff,
    <singleton-object>,
    inc!, dec!;                 // like foo++ foo--

  // Trie - a mutable explicit key collection without a forward-iteration-protocol
  //        because it would be very inefficient.
  create
    <trie>,
      <object-trie>,
      <ichar-trie>,
      <string-trie>,
      <istring-trie>,
    <trie-node>,
      <object-trie-node>,
      <ichar-trie-node>,
      <string-trie-node>,
      <istring-trie-node>,
      child-node,
      child-node-setter,
    find-node,
    node-value,
    traverse,
    <trie-element-error>;

  // enums
  create
    enum-definer,
    enum-class-definer;

  // Conditions
  create
    with-restart,
    with-simple-restart;

  create
    <uint>, <uint?>, uint?;
end module uncommon-utils;

// Use this module in addition to common-dylan to get ADDITIONAL abbreviated names.
// Use uncommon-dylan to get ONLY the abbreviated names.
define module uncommon-brevity
  // Names from the Dylan module. (This list can be generated by copying the "rename"
  // clause in the uncommon-utils-impl "use common-dylan" statement and deleting the
  // "<foo> =>" part. Not sure if there's a good way to prevent this duplication of
  // effort.)

  // Constants
  create
    $max-int,
    $min-int;

  // Types and associated predicates
  create
    <bool>,                bool?,
    <char>,    <char?>,    char?,
    <func>,    <func?>,    func?,
    <int>,     <int?>,     int?,
    <seq>,     <seq?>,     seq?,
               <string?>,  string?,
               <symbol?>,  symbol?,
    <vector*>, <vector*?>, vector*?;

  // Functions
  create
    concat,
    copy-seq;
end module;

// Like common-dylan but
//
// * Includes all the exports from uncommon-utils.
// * Has shorter names for some of the most commonly used definitions, hopefully without
//   loss of readability.
// * Includes a few other commonly used definitions like <byte-vector>.
//
// Use this module instead of uncommon-utils if you don't want to have BOTH the long and
// short names available.
define module uncommon-dylan
  use common-dylan,
    // We exclude everything for which an equivalent is exported from uncommon-brevity.
    // (This list can be generated by copying the "rename" clause in the
    // uncommon-utils-impl "use common-dylan" statement and deleting the "=> <foo>,"
    // part. Not sure if there's a good way to prevent this duplication of effort.)
    exclude: {
              // Constants
              $maximum-integer,
              $minimum-integer,

              // Types
              <boolean>,
              <character>,
              <function,
              <integer>,
              <sequence>,
              <stretchy-vector>,

              // Functions
              concatenate,
              copy-sequence },
    export: all;
  use uncommon-brevity, export: all;
end module uncommon-dylan;

define module uncommon-utils-impl
  use common-dylan;

  use uncommon-brevity;
  use uncommon-utils;

  use byte-vector;
  use table-extensions;
end module;
